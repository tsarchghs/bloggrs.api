generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("SHADOW_DATABASE_URL")
}

model blogthemes {
  id          Int       @id @default(autoincrement())
  name        String    @unique() @db.VarChar(255)
  description String    @db.Text
  image_url   String    @db.Text
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @default(now())

  blogs blogs[]
}

model blogcategories {
  id        Int       @id @default(autoincrement())
  name      String    @unique() @db.VarChar(255)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())
  blogs     blogs[]
}

model blogcontacts {
  id         Int       @id @default(autoincrement())
  first_name String    @db.VarChar(255)
  last_name  String    @db.VarChar(255)
  email      String    @db.VarChar(255)
  content    String    @db.Text
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @default(now())
  BlogId     Int
  blogs      blogs     @relation(fields: [BlogId], references: [id], onDelete: NoAction)

  @@index([BlogId])
}

model blogpostcategories {
  createdAt   DateTime?  @default(now())
  updatedAt   DateTime?  @default(now())
  description String     @db.VarChar(255)
  CategoryId  Int
  BlogId      Int
  blogs       blogs      @relation(fields: [BlogId], references: [id], onDelete: Cascade)
  categories  categories @relation(fields: [CategoryId], references: [id], onDelete: Cascade)

  @@id([CategoryId, BlogId])
  @@index([BlogId])
}

model roles {
  id                Int                 @id @default(autoincrement())
  name              String              @db.VarChar(255)
  value             String              @db.Text
  description       String?             @db.VarChar(255)
  isSystem          Boolean             @default(false) // To identify system-level roles
  permissions       permissions[]
  parentRoleId      Int?
  parentRole        roles?              @relation("RoleHierarchy", fields: [parentRoleId], references: [id])
  childRoles        roles[]             @relation("RoleHierarchy")
  users             users[]             @relation("UserRoles")
  tenantId          Int? // For tenant-specific roles
  tenant            tenants?            @relation(fields: [tenantId], references: [id])
  resource_policies resource_policies[]

  @@unique([name, tenantId]) // Roles must be unique within a tenant
}

model permissions {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(255)
  action      String   @db.VarChar(255) // e.g., 'create', 'read', 'update', 'delete'
  resource    String   @db.VarChar(255) // e.g., 'blog', 'post', 'comment'
  description String?  @db.VarChar(255)
  isSystem    Boolean  @default(false)
  roleId      Int?
  role        roles?   @relation(fields: [roleId], references: [id], onDelete: Cascade)
  tenantId    Int? // For tenant-specific permissions
  tenant      tenants? @relation(fields: [tenantId], references: [id])

  teammemberspermissions teammemberspermissions[]

  @@unique([name, tenantId])
  @@unique([action, resource, roleId, tenantId])
}

model resource_policies {
  id           Int      @id @default(autoincrement())
  resourceType String   @db.VarChar(255) // e.g., 'blog', 'post'
  resourceId   Int // ID of the specific resource
  roleId       Int // Role this policy applies to
  permissions  Json // Detailed permission settings as JSON
  priority     Int      @default(0) // For resolving conflicts
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  role roles @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([resourceType, resourceId, roleId])
  @@index([resourceType, resourceId])
}

model blogpermissions {
  id           Int    @id @default(autoincrement())
  action       String @db.VarChar(255) // e.g., 'read', 'write', 'delete'
  resourceId   Int // ID of the resource (blog, page, etc.)
  resourceType String @db.VarChar(255) // Type of resource (e.g., 'blog', 'page', 'post')
  teammemberId Int // Changed from userId

  blog       blogs       @relation(fields: [resourceId], references: [id])
  teammember teammembers @relation(fields: [teammemberId], references: [id], onDelete: Cascade)

  @@unique([teammemberId, resourceId, resourceType, action])
}

model teammemberspermissions {
  id           Int     @id @default(autoincrement())
  teammemberId Int
  permissionId Int
  isCustom     Boolean @default(false)

  teammember teammembers @relation(fields: [teammemberId], references: [id], onDelete: Cascade)
  permission permissions @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([teammemberId, permissionId])
}

model temporaryaccesses {
  id           Int      @id @default(autoincrement())
  teammemberId Int // Changed from userId
  resourceId   Int
  resourceType String   @db.VarChar(255)
  grantedAt    DateTime @default(now())
  expiresAt    DateTime
  isActive     Boolean  @default(true)

  teammember teammembers @relation(fields: [teammemberId], references: [id], onDelete: Cascade)
  blog       blogs       @relation(fields: [resourceId], references: [id], onDelete: Cascade)

  @@unique([teammemberId, resourceId, resourceType])
  @@index([resourceId])
}

model blogs {
  id                 Int                  @id @default(autoincrement())
  name               String               @db.VarChar(255)
  slug               String               @unique() @db.VarChar(255)
  description        String               @db.Text
  craftjs_json_state String?              @db.Text
  logo_url           String?              @db.VarChar(255)
  createdAt          DateTime?            @default(now())
  updatedAt          DateTime?            @default(now())
  deletedAt          DateTime?
  UserId             Int
  BlogCategoryId     Int
  BlogThemeId        Int
  ownershipTransfers ownershiptransfers[] // This will create a relation with ownershiptransfers

  createdBy      Int?
  updatedBy      Int?
  tenants        tenants[] @relation("BlogTenants", map: "blogTenants")
  createdTenants tenants[] @relation("TenantCreatedBy", map: "tenantCreatedBy") // Specify a unique map name
  updatedTenants tenants[] @relation("TenantUpdatedBy", map: "tenantUpdatedBy") // Specify a unique map name

  blogcategories     blogcategories?      @relation(fields: [BlogCategoryId], references: [id], onDelete: NoAction)
  blogthemes         blogthemes?          @relation(fields: [BlogThemeId], references: [id], onDelete: NoAction)
  users              users                @relation(fields: [UserId], references: [id], onDelete: NoAction)
  blogcontacts       blogcontacts[]
  blogpostcategories blogpostcategories[]
  pages              pages[]
  posts              posts[]
  referrals          referrals[]
  secretkeys         secretkeys[]
  publickeys         publickeys[]
  teammembers        teammembers[]
  sitesessions       sitesessions[]
  permissions        blogpermissions[]
  temporaryaccesses  temporaryaccesses[]
  medias             medias[]

  instances instances[] // Blog can have multiple instances

  @@index([BlogCategoryId])
  @@index([UserId])
}

model instances {
  id        String   @id @default(uuid())
  name      String   @db.VarChar(255)
  status    String   @db.VarChar(50)
  BlogId    Int?
  UserId    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  blog blogs? @relation(fields: [BlogId], references: [id], onDelete: Cascade)
  user users? @relation(fields: [UserId], references: [id], onDelete: Cascade)

  @@index([BlogId])
  @@index([UserId])
}

model blocks {
  id              Int               @id @default(autoincrement())
  name            String            @db.VarChar(255)
  isChild         Boolean           @default(false)
  blockattributes blockattributes[]
  blockchildrens  blockchildrens[]
  children        children[]

  page   pages @relation(fields: [PageId], references: [id], onDelete: Cascade)
  PageId Int

  @@index([PageId])
}

model children {
  id             Int              @id @default(autoincrement())
  block          blocks           @relation(fields: [BlockId], references: [id])
  BlockId        Int
  blockchildrens blockchildrens[]

  @@index([BlockId])
}

model blockchildrens {
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @default(now())
  BlockId    Int
  ChildrenId Int
  children   children  @relation(fields: [ChildrenId], references: [id], onDelete: Cascade)
  blocks     blocks    @relation(fields: [BlockId], references: [id], onDelete: Cascade)

  @@id([BlockId, ChildrenId])
  @@index([BlockId])
}

model blockattributes {
  id      Int    @id @default(autoincrement())
  type    String @db.VarChar(255)
  key     String @db.VarChar(255)
  value   String @db.VarChar(255)
  block   blocks @relation(fields: [BlockId], references: [id])
  BlockId Int

  @@unique([id, key])
}

model categories {
  id                 Int                  @id @default(autoincrement())
  name               String               @unique @db.VarChar(255)
  slug               String               @unique @db.VarChar(255)
  createdAt          DateTime?            @default(now())
  updatedAt          DateTime?            @default(now())
  blogpostcategories blogpostcategories[] // Existing relation
  postcategories     postcategories[] // Existing relation
}

model pages {
  id                 Int       @id @default(autoincrement())
  name               String    @db.VarChar(255)
  slug               String    @db.VarChar(255)
  craftjs_json_state String?   @db.Text
  createdAt          DateTime? @default(now())
  updatedAt          DateTime? @default(now())
  BlogId             Int
  UserId             Int
  blogs              blogs     @relation(fields: [BlogId], references: [id], onDelete: NoAction)
  users              users     @relation(fields: [UserId], references: [id], onDelete: NoAction)
  blocks             blocks[]

  @@index([BlogId])
  @@index([UserId])
}

model postcategories {
  createdAt  DateTime?  @default(now())
  updatedAt  DateTime?  @default(now())
  CategoryId Int
  PostId     Int
  categories categories @relation(fields: [CategoryId], references: [id], onDelete: Cascade)
  posts      posts      @relation(fields: [PostId], references: [id], onDelete: Cascade)

  @@id([CategoryId, PostId])
  @@index([PostId])
}

model postcomments {
  id        Int       @id @default(autoincrement())
  content   String    @db.Text
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())
  postId    Int
  userId    Int

  parentId        Int? // Nullable for top-level comments
  approved        Boolean @default(false)
  reputationScore Int     @default(0)

  post             posts            @relation(fields: [postId], references: [id], onDelete: Cascade)
  user             users            @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent           postcomments?    @relation("NestedComments", fields: [parentId], references: [id], onDelete: Cascade)
  children         postcomments[]   @relation("NestedComments")
  moderationStatus ModerationStatus @default(PENDING)

  @@index([postId])
  @@index([userId])
}

model tenants {
  id           Int      @id @default(autoincrement())
  name         String   @db.VarChar(255)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  status       String   @db.VarChar(50) // e.g., 'active', 'suspended'
  settings     Json? // Store JSON settings for tenant-specific configurations
  createdBy    Int? // Reference to the user who created the tenant
  updatedBy    Int? // Reference to the user who last updated the tenant
  blogsCreated blogs[]  @relation("TenantCreatedBy")
  blogsUpdated blogs[]  @relation("TenantUpdatedBy")

  users       users[]
  blogs       blogs[]       @relation("BlogTenants") // Modify to match the relation name
  creator     users?        @relation("TenantCreatedBy", fields: [createdBy], references: [id])
  updater     users?        @relation("TenantUpdatedBy", fields: [updatedBy], references: [id])
  roles       roles[]
  permissions permissions[]
}

model ownershiptransfers {
  id            Int       @id @default(autoincrement())
  fromUserId    Int
  toUserId      Int
  BlogId        Int
  transferredAt DateTime? @default(now())

  fromUser users @relation("FromUser", fields: [fromUserId], references: [id], onDelete: Cascade)
  toUser   users @relation("ToUser", fields: [toUserId], references: [id], onDelete: Cascade)
  blog     blogs @relation(fields: [BlogId], references: [id], onDelete: Cascade)

  @@index([BlogId])
}

model postlikes {
  id        Int       @id @default(autoincrement())
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())
  PostId    Int?
  UserId    Int
  posts     posts?    @relation(fields: [PostId], references: [id])
  users     users     @relation(fields: [UserId], references: [id], onDelete: NoAction)

  @@index([PostId])
  @@index([UserId])
}

model posts {
  id           Int          @id @default(autoincrement())
  title        String       @db.VarChar(255)
  slug         String       @db.VarChar(255)
  html_content String       @db.Text
  status       posts_status @default(DRAFT) // Ensure status includes 'DRAFT', 'PUBLISHED', etc.
  createdAt    DateTime?    @default(now())
  updatedAt    DateTime?    @default(now())
  publishedAt  DateTime? // Field to specify when the post will be published
  BlogId       Int
  UserId       Int
  scheduledAt  DateTime? // Time when the post is scheduled to be published
  language     String? // Optional: e.g., 'en', 'es', 'fr'
  locale       String? // Optional: e.g., 'en-US', 'es-ES', 'fr-FR'

  createdBy      Int?
  updatedBy      Int?
  popularity     Int // For sorting by popularity
  blogs          blogs            @relation(fields: [BlogId], references: [id], onDelete: NoAction)
  users          users            @relation(fields: [UserId], references: [id], onDelete: NoAction)
  postcategories postcategories[]
  postcomments   postcomments[]
  postlikes      postlikes[]
  isDeleted      Boolean          @default(false)
  postversions   postversions[]
  posttags       posttags[]
  postanalytics  postanalytics[]

  moderationStatus ModerationStatus @default(PENDING)

  @@index([BlogId])
  @@index([UserId])
}

model webhooks {
  id        Int      @id @default(autoincrement())
  url       String // The endpoint to which the webhook sends notifications
  event     String // The type of event (e.g., 'POST_CREATED', 'COMMENT_ADDED', 'USER_REGISTERED')
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int // Optional: the ID of the user who created the webhook
  User      users?   @relation(fields: [userId], references: [id]) // Relation to User model
}

model integrations {
  id          Int      @id @default(autoincrement())
  userId      Int // The ID of the user who owns the integration
  platform    String // The name of the platform (e.g., 'Slack', 'Mailchimp')
  accessToken String // The token for authenticating API requests
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        users    @relation(fields: [userId], references: [id])
}

model userpreferences {
  id           Int    @id @default(autoincrement())
  theme        String // e.g., 'light', 'dark', or the name of a custom theme
  customStyles Json? // For storing additional customizations as JSON
  userId       Int    @unique // Ensure this field is unique
  user         users  @relation("UserPreferences", fields: [userId], references: [id]) // Specify fields and references here
}

model themes {
  id          Int     @id @default(autoincrement())
  name        String  @unique // e.g., 'light', 'dark', 'custom-theme-1'
  description String?
  styles      Json // JSON object for styles associated with the theme
}

model medias {
  id        Int      @id @default(autoincrement())
  url       String   @db.Text // URL of the uploaded media
  type      String // 'image', 'video', 'document', etc.
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  BlogId    Int? // Optional relation to the Blog model

  blogs blogs? @relation(fields: [BlogId], references: [id], onDelete: Cascade)
}

model postanalytics {
  id             Int      @id @default(autoincrement())
  postId         Int
  views          Int      @default(0)
  likes          Int      @default(0)
  shares         Int      @default(0)
  engagementTime Int      @default(0) // total engagement time in seconds
  lastUpdated    DateTime @updatedAt

  post posts @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model postversions {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text // Store the content of the version
  createdAt DateTime @default(now())
  PostId    Int // Reference to the post this version belongs to

  posts posts @relation(fields: [PostId], references: [id], onDelete: Cascade)
}

model tags {
  id        Int      @id @default(autoincrement())
  name      String   @unique() @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  postTags posttags[] // Relation to associate posts with tags
}

model posttags {
  PostId Int
  TagId  Int

  posts posts @relation(fields: [PostId], references: [id], onDelete: Cascade)
  tags  tags  @relation(fields: [TagId], references: [id], onDelete: Cascade)

  @@id([PostId, TagId]) // Composite key to prevent duplicate entries
}

model referrals {
  id        Int             @id @default(autoincrement())
  type      referrals_type?
  createdAt DateTime?       @default(now())
  updatedAt DateTime?       @default(now())
  BlogId    Int?
  UserId    Int
  blogs     blogs?          @relation(fields: [BlogId], references: [id])
  users     users           @relation(fields: [UserId], references: [id], onDelete: NoAction)

  @@index([BlogId])
  @@index([UserId])
}

model secretkeys {
  id        String    @id @db.Char(36)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())
  BlogId    Int
  blogs     blogs     @relation(fields: [BlogId], references: [id], onDelete: NoAction)

  @@index([BlogId])
}

model publickeys {
  id        String    @id @default(uuid()) @db.Char(36)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())
  BlogId    Int
  blogs     blogs     @relation(fields: [BlogId], references: [id], onDelete: NoAction)

  @@index([BlogId])
}

model teammembers {
  id        Int       @id @default(autoincrement())
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())
  UserId    Int
  BlogId    Int
  blogs     blogs     @relation(fields: [BlogId], references: [id], onDelete: NoAction)
  users     users     @relation(fields: [UserId], references: [id], onDelete: NoAction)
  isOwner   Boolean   @default(false)

  // Add relations for permissions
  blogpermissions        blogpermissions[]
  teammemberspermissions teammemberspermissions[]
  temporaryaccesses      temporaryaccesses[]

  @@unique([UserId, BlogId]) // Add unique constraint
  @@index([BlogId])
  @@index([UserId])
}

model users {
  id                     Int                  @id @default(autoincrement())
  email                  String               @unique() @db.VarChar(255)
  password               String               @db.VarChar(255)
  first_name             String               @db.VarChar(255)
  last_name              String               @db.VarChar(255)
  isGuest                Boolean
  createdAt              DateTime?            @default(now())
  updatedAt              DateTime?            @default(now())
  createdTenants         tenants[]            @relation("TenantCreatedBy")
  updatedTenants         tenants[]            @relation("TenantUpdatedBy")
  ownershipTransfersFrom ownershiptransfers[] @relation("FromUser")
  ownershipTransfersTo   ownershiptransfers[] @relation("ToUser")
  webhooks               webhooks[]
  integrations           integrations[]
  preferences            userpreferences?     @relation("UserPreferences")

  createdBy Int?
  updatedBy Int?

  blogs        blogs[]
  pages        pages[]
  postcomments postcomments[]
  postlikes    postlikes[]
  posts        posts[]
  referrals    referrals[]
  teammembers  teammembers[]
  sitesessions sitesessions[]
  roles        roles[]        @relation("UserRoles")

  actionlogs actionlogs[]
  instances  instances[]

  // Relation to tenants
  tenantId Int?
  tenant   tenants? @relation(fields: [tenantId], references: [id])

  //bloggrs-v
  fc_image_id         String?              @db.VarChar(255)
  customer_id         String?              @db.VarChar(255)
  authorizationcodes  authorizationcodes[]
  identitydocuments   identitydocuments[]
  useraddresses       useraddresses[]
  bloggrs_v_instances bloggrs_v_instances? @relation(fields: [bloggrs_v_instancesId], references: [id])

  bloggrs_v_instancesId String? @db.VarChar(255)
}

model actionlogs {
  id           Int       @id @default(autoincrement())
  action       String    @db.VarChar(255) // e.g., 'create', 'edit', 'delete'
  userId       Int
  resourceId   Int
  resourceType String    @db.VarChar(255) // Type of resource
  createdAt    DateTime? @default(now()) // When the action was logged

  user users @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model sitesessions {
  id        Int         @id @default(autoincrement())
  UserId    Int?
  BlogId    Int
  pageviews pageviews[]
  endedAt   DateTime?
  createdAt DateTime?   @default(now())
  updatedAt DateTime?   @default(now())

  blogs blogs  @relation(fields: [BlogId], references: [id], onDelete: NoAction)
  users users? @relation(fields: [UserId], references: [id], onDelete: NoAction)
}

model pageviews {
  id        Int       @id @default(autoincrement())
  pathname  String    @db.VarChar(255)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())

  SiteSessionId Int
  sitesessions  sitesessions @relation(fields: [SiteSessionId], references: [id], onDelete: NoAction)
}

// ... existing schema ...

model jsfiles {
  id          Int      @id @default(autoincrement())
  filename    String   @db.VarChar(255)
  content     String?  @db.Text
  sourceCode  String?  @db.Text
  fileType    String   @default("js") @db.VarChar(10)
  isModule    Boolean  @default(true)
  isGenerated Boolean  @default(false)
  sourceMap   Json?
  metadata    Json? // Add this field to store file metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Existing relations
  codeblocks   jscodeblocks[]
  imports      jsimports[]
  exports      jsexports[]
  dependencies jsdependencies[]

  // Existing fields
  structure   Json?
  importOrder Json?
  contextPath String? @db.VarChar(255)
  hash        String? @db.VarChar(64)
}

model jscodeblocks {
  id            Int      @id @default(autoincrement())
  fileId        Int
  blockType     String   @db.VarChar(50)
  blockName     String?  @db.VarChar(255)
  content       String   @db.Text
  startLine     Int
  endLine       Int
  order         Int      @default(0)
  isExported    Boolean  @default(false)
  documentation String?  @db.Text
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  scope         String?  @db.VarChar(50)
  dependencies  Json     @default("[]")
  parentBlockId Int?
  methodId      Int?     @unique // Add @unique here

  file           jsfiles             @relation(fields: [fileId], references: [id], onDelete: Cascade)
  parentBlock    jscodeblocks?       @relation("BlockHierarchy", fields: [parentBlockId], references: [id])
  childBlocks    jscodeblocks[]      @relation("BlockHierarchy")
  method         jsclassmethods?     @relation("BlockMethod", fields: [methodId], references: [id], onDelete: SetNull)
  parameters     jsfunctionparams[]
  properties     jsclassproperties[]
  methods        jsclassmethods[]    @relation("BlockMethods")
  variables      jsvariables[]
  comments       jscomments[]
  jsclassmethods jsclassmethods[]

  @@index([fileId])
  @@index([parentBlockId])
  @@index([methodId])
}

model jsclassproperties {
  id            Int      @id @default(autoincrement())
  codeBlockId   Int
  propertyName  String   @db.VarChar(255)
  propertyType  String?  @db.Text
  isStatic      Boolean  @default(false)
  visibility    String   @default("public") @db.VarChar(20)
  initialValue  String?  @db.Text
  documentation String?  @db.Text
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  codeBlock jscodeblocks @relation(fields: [codeBlockId], references: [id], onDelete: Cascade)

  @@index([codeBlockId])
}

model jsclassmethods {
  id              Int      @id @default(autoincrement())
  codeBlockId     Int
  methodName      String   @db.VarChar(255)
  parameters      String?  @db.Text // Add field to store parameters as JSON
  returnType      String?  @db.VarChar(50) // Add field for return type
  isStatic        Boolean  @default(false)
  isAsync         Boolean  @default(false)
  isArrowFunction Boolean  @default(false)
  content         String   @db.Text
  documentation   String?  @db.Text
  visibility      String   @default("public") @db.VarChar(20)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  codeBlock        jscodeblocks       @relation(fields: [codeBlockId], references: [id], onDelete: Cascade)
  jsfunctionparams jsfunctionparams[]
  blocks           jscodeblocks[]     @relation("BlockMethods")
  methodBlock      jscodeblocks?      @relation("BlockMethod")

  @@index([codeBlockId])
}

model jsfunctionparams {
  id            Int      @id @default(autoincrement())
  codeBlockId   Int
  paramName     String   @db.VarChar(255)
  paramType     String?  @db.VarChar(50)
  defaultValue  String?  @db.Text
  isOptional    Boolean  @default(false) // Add field for optional parameters
  documentation String?  @db.Text // Add field for parameter documentation
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  methodId      Int // Add this field to link to jsclassmethods

  codeBlock jscodeblocks   @relation(fields: [codeBlockId], references: [id], onDelete: Cascade)
  method    jsclassmethods @relation(fields: [methodId], references: [id], onDelete: Cascade)

  @@index([codeBlockId])
  @@index([methodId])
}

model jsimports {
  id           Int      @id @default(autoincrement())
  fileId       Int
  importSource String   @db.VarChar(255)
  importType   String   @db.VarChar(50) // 'default', 'named', 'namespace', 'side-effect'
  importedName String?  @db.VarChar(255)
  alias        String?  @db.VarChar(255)
  isTypeOnly   Boolean  @default(false)
  isTypeScript Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  position     Json? // Changed from Int to Json to store location data
  group        String?  @db.VarChar(50)

  file jsfiles @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@index([fileId])
  @@index([fileId, importSource(length: 191)])
}

model jsexports {
  id           Int      @id @default(autoincrement())
  fileId       Int
  exportType   String   @db.VarChar(50) // 'default', 'named'
  exportedName String?  @db.VarChar(255)
  alias        String?  @db.VarChar(255)
  typeOnly     Boolean  @default(false) // Add field for type-only exports
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  file jsfiles @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@index([fileId])
}

model jscomments {
  id          Int      @id @default(autoincrement())
  codeBlockId Int
  commentType String   @db.VarChar(20) // 'inline', 'block', 'jsdoc'
  content     String   @db.Text
  startLine   Int
  endLine     Int
  tags        Json? // Add field to store JSDoc tags as JSON
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  codeBlock jscodeblocks @relation(fields: [codeBlockId], references: [id], onDelete: Cascade)

  @@index([codeBlockId])
}

model jsdependencies {
  id             Int      @id @default(autoincrement())
  fileId         Int
  dependencyName String   @db.VarChar(255)
  version        String?  @db.VarChar(50)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  file jsfiles @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@index([fileId])
}

model backups {
  id          String   @id @default(uuid())
  name        String
  description String?
  instanceId  String
  status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum posts_status {
  ARCHIVED
  DRAFT
  PUBLISHED
  UNPUBLISHED
}

enum referrals_type {
  BLOG
}

enum ModerationStatus {
  PENDING
  APPROVED
  REJECTED
}

model jsvariables {
  id            Int      @id @default(autoincrement())
  codeBlockId   Int
  variableName  String   @db.VarChar(255)
  variableType  String?  @db.VarChar(50)
  initialValue  String?  @db.Text
  isConst       Boolean  @default(false)
  isLet         Boolean  @default(false)
  documentation String?  @db.Text
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  codeBlock jscodeblocks @relation(fields: [codeBlockId], references: [id], onDelete: Cascade)

  @@index([codeBlockId])
}

model instancePaths {
  id         String   @id @default(uuid())
  instanceId String   @unique
  path       String   @db.Text
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([instanceId])
}

model apikeys {
  id        String   @id @db.Char(36)
  name      String   @db.VarChar(255)
  createdAt DateTime @db.DateTime(0)
  updatedAt DateTime @db.DateTime(0)
  ProjectId String   @db.VarChar(255)
  projects  projects @relation(fields: [ProjectId], references: [id], onDelete: NoAction, map: "apikeys_ibfk_1")

  @@index([ProjectId], map: "ProjectId")
}

model applications {
  id                         String             @id @db.VarChar(255)
  name                       String             @db.VarChar(255)
  application_logo_url       String?            @db.VarChar(255)
  application_name           String             @db.VarChar(255)
  homepage_url               String             @db.VarChar(255)
  description                String             @db.Text
  authorization_callback_url String             @db.VarChar(255)
  charge_callback_url        String             @db.VarChar(255)
  createdAt                  DateTime           @db.DateTime(0)
  updatedAt                  DateTime           @db.DateTime(0)
  ProjectId                  String             @db.VarChar(255)
  projects                   projects           @relation(fields: [ProjectId], references: [id], onDelete: NoAction, map: "applications_ibfk_1")
  paymentproviders           paymentproviders[]

  @@index([ProjectId], map: "ProjectId")
}

model authorizationcodes {
  id            String       @id @db.VarChar(255)
  revokedAt     DateTime?    @db.DateTime(0)
  used          Boolean      @default(false)
  scope         String       @default("user::basic") @db.VarChar(255)
  createdAt     DateTime     @db.DateTime(0)
  updatedAt     DateTime     @db.DateTime(0)
  OAuthClientId String       @db.VarChar(255)
  UserId        Int
  oauthclients  oauthclients @relation(fields: [OAuthClientId], references: [id], onDelete: NoAction, map: "authorizationcodes_ibfk_1")
  users         users        @relation(fields: [UserId], references: [id], onDelete: NoAction, map: "authorizationcodes_ibfk_2")

  @@index([OAuthClientId], map: "OAuthClientId")
  @@index([UserId], map: "UserId")
}

model authorizedjavascriptorigins {
  id            String       @id @db.VarChar(255)
  deletedAt     DateTime?    @db.DateTime(0)
  value         String       @db.VarChar(255)
  createdAt     DateTime     @db.DateTime(0)
  updatedAt     DateTime     @db.DateTime(0)
  OAuthClientId String       @db.VarChar(255)
  oauthclients  oauthclients @relation(fields: [OAuthClientId], references: [id], onDelete: NoAction, map: "authorizedjavascriptorigins_ibfk_1")

  @@index([OAuthClientId], map: "OAuthClientId")
}

model authorizedredirecturis {
  id            String       @id @db.VarChar(255)
  deletedAt     DateTime?    @db.DateTime(0)
  value         String       @db.VarChar(255)
  createdAt     DateTime     @db.DateTime(0)
  updatedAt     DateTime     @db.DateTime(0)
  OAuthClientId String       @db.VarChar(255)
  oauthclients  oauthclients @relation(fields: [OAuthClientId], references: [id], onDelete: NoAction, map: "authorizedredirecturis_ibfk_1")

  @@index([OAuthClientId], map: "OAuthClientId")
}

model charges {
  id                String   @id @db.VarChar(255)
  app_id            String   @db.VarChar(255)
  v_user_id         Int
  v_user_address_id String?  @db.VarChar(255)
  customer_id       String   @db.VarChar(255)
  amount            BigInt
  stripe_charge_id  String   @db.VarChar(255)
  createdAt         DateTime @db.DateTime(0)
  updatedAt         DateTime @db.DateTime(0)
}

model comprefacesettings {
  id               String   @db.VarChar(255)
  recognition_key  String   @db.VarChar(150)
  verification_key String   @db.VarChar(150)
  detection_key    String   @db.VarChar(150)
  createdAt        DateTime @db.DateTime(0)
  updatedAt        DateTime @db.DateTime(0)

  @@id([id, recognition_key, verification_key, detection_key])
}

model identitydocuments {
  id                    String   @id @db.VarChar(255)
  documentNumber        String?  @db.VarChar(255)
  firstName             String?  @db.VarChar(255)
  lastName              String?  @db.VarChar(255)
  fullName              String?  @db.VarChar(255)
  sex                   String?  @db.VarChar(255)
  age                   String?  @db.VarChar(255)
  dob                   String?  @db.VarChar(255)
  dob_day               String?  @db.VarChar(255)
  dob_month             String?  @db.VarChar(255)
  dob_year              String?  @db.VarChar(255)
  expiry                String?  @db.VarChar(255)
  expiry_day            String?  @db.VarChar(255)
  expiry_month          String?  @db.VarChar(255)
  expiry_year           String?  @db.VarChar(255)
  daysToExpiry          String?  @db.VarChar(255)
  placeOfBirth          String?  @db.VarChar(255)
  optionalData          String?  @db.VarChar(255)
  documentType          String?  @db.VarChar(255)
  documentSide          String?  @db.VarChar(255)
  issuerOrg_region_full String?  @db.VarChar(255)
  issuerOrg_region_abbr String?  @db.VarChar(255)
  issuerOrg_full        String?  @db.VarChar(255)
  issuerOrg_iso2        String?  @db.VarChar(255)
  issuerOrg_iso3        String?  @db.VarChar(255)
  nationality_full      String?  @db.VarChar(255)
  nationality_iso2      String?  @db.VarChar(255)
  nationality_iso3      String?  @db.VarChar(255)
  internalId            String?  @db.VarChar(255)
  createdAt             DateTime @db.DateTime(0)
  updatedAt             DateTime @db.DateTime(0)
  UserId                Int?
  users                 users?   @relation(fields: [UserId], references: [id], map: "identitydocuments_ibfk_1")

  @@index([UserId], map: "UserId")
}

model bloggrs_v_instances {
  id                  String   @id @db.VarChar(255)
  secret              String   @db.VarChar(255)
  createdAt           DateTime @db.DateTime(0)
  updatedAt           DateTime @db.DateTime(0)
  ComprefaceSettingId String   @db.VarChar(255)
  users               users[]
}

model instanceusers {
  id         String     @id @db.VarChar(255)
  email      String     @unique(map: "email") @db.VarChar(255)
  password   String     @db.VarChar(255)
  first_name String     @db.VarChar(255)
  last_name  String     @db.VarChar(255)
  isAdmin    Boolean    @default(false)
  createdAt  DateTime   @db.DateTime(0)
  updatedAt  DateTime   @db.DateTime(0)
  projects   projects[]
}

model metadata {
  id               String             @id @db.Char(36)
  key              String             @db.VarChar(255)
  value            String             @db.VarChar(255)
  createdAt        DateTime           @db.DateTime(0)
  updatedAt        DateTime           @db.DateTime(0)
  paymentproviders paymentproviders[]
}

model oauthclients {
  id                          String                        @id @db.VarChar(255)
  type                        oauthclients_type
  name                        String                        @db.VarChar(255)
  deletedAt                   DateTime?                     @db.DateTime(0)
  createdAt                   DateTime                      @db.DateTime(0)
  updatedAt                   DateTime                      @db.DateTime(0)
  project_id                  String?                       @db.VarChar(255)
  authorizationcodes          authorizationcodes[]
  authorizedjavascriptorigins authorizedjavascriptorigins[]
  authorizedredirecturis      authorizedredirecturis[]
  projects                    projects?                     @relation(fields: [project_id], references: [id], map: "oauthclients_ibfk_1")
  oauthclientsecrets          oauthclientsecrets[]

  @@index([project_id], map: "project_id")
}

model oauthclientsecrets {
  id            String        @id @db.VarChar(255)
  deletedAt     DateTime?     @db.DateTime(0)
  createdAt     DateTime      @db.DateTime(0)
  updatedAt     DateTime      @db.DateTime(0)
  OAuthClientId String?       @db.VarChar(255)
  oauthclients  oauthclients? @relation(fields: [OAuthClientId], references: [id], map: "oauthclientsecrets_ibfk_1")

  @@index([OAuthClientId], map: "OAuthClientId")
}

model paymentproviders {
  id            String       @id @db.Char(36)
  type          String       @db.VarChar(255)
  createdAt     DateTime     @db.DateTime(0)
  updatedAt     DateTime     @db.DateTime(0)
  ApplicationId String       @db.VarChar(255)
  MetadatumId   String       @db.Char(36)
  applications  applications @relation(fields: [ApplicationId], references: [id], onDelete: NoAction, map: "paymentproviders_ibfk_1")
  metadata      metadata     @relation(fields: [MetadatumId], references: [id], onDelete: NoAction, map: "paymentproviders_ibfk_2")

  @@index([ApplicationId], map: "ApplicationId")
  @@index([MetadatumId], map: "MetadatumId")
}

model projects {
  id              String         @id @db.VarChar(255)
  name            String         @db.VarChar(255)
  createdAt       DateTime       @db.DateTime(0)
  updatedAt       DateTime       @db.DateTime(0)
  instanceuser_id String?        @db.VarChar(255)
  apikeys         apikeys[]
  applications    applications[]
  oauthclients    oauthclients[]
  instanceusers   instanceusers? @relation(fields: [instanceuser_id], references: [id], map: "projects_ibfk_1")

  @@index([instanceuser_id], map: "instanceuser_id")
}

model useraddresses {
  id          String   @id @db.VarChar(255)
  street      String   @db.VarChar(255)
  city        String   @db.VarChar(255)
  zipCode     String   @db.VarChar(255)
  addressType String   @default("private") @db.VarChar(255)
  companyName String?  @db.VarChar(255)
  country     String   @db.VarChar(255)
  phoneNumber String   @db.VarChar(255)
  UserId      Int
  instance_id String   @db.VarChar(255)
  createdAt   DateTime @db.DateTime(0)
  updatedAt   DateTime @db.DateTime(0)
  users       users    @relation(fields: [UserId], references: [id], onDelete: NoAction, map: "useraddresses_ibfk_1")

  @@index([UserId], map: "UserId")
}

enum oauthclients_type {
  WebApplication
}
